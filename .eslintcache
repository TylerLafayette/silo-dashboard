[{"/Users/tyler/Silo/silo-dashboard/src/reportWebVitals.ts":"1","/Users/tyler/Silo/silo-dashboard/src/index.tsx":"2","/Users/tyler/Silo/silo-dashboard/src/features/MainLayout/MainLayout.tsx":"3","/Users/tyler/Silo/silo-dashboard/src/features/Navbar/index.ts":"4","/Users/tyler/Silo/silo-dashboard/src/features/Navbar/Navbar.tsx":"5","/Users/tyler/Silo/silo-dashboard/src/features/Navbar/Navbar.styles.ts":"6","/Users/tyler/Silo/silo-dashboard/src/components/GroupsGrid/GroupsGrid.styles.ts":"7","/Users/tyler/Silo/silo-dashboard/src/features/Home/Home.tsx":"8","/Users/tyler/Silo/silo-dashboard/src/features/Home/index.ts":"9","/Users/tyler/Silo/silo-dashboard/src/features/GroupOverview/GroupOverview.tsx":"10","/Users/tyler/Silo/silo-dashboard/src/components/GroupsGrid/GroupsGrid.tsx":"11","/Users/tyler/Silo/silo-dashboard/src/features/GroupOverview/GroupOverview.styles.ts":"12","/Users/tyler/Silo/silo-dashboard/src/components/GroupsGrid/index.ts":"13","/Users/tyler/Silo/silo-dashboard/src/features/CreateGroup/CreateGroup.tsx":"14","/Users/tyler/Silo/silo-dashboard/src/features/CreateGroup/CreateGroup.styles.ts":"15","/Users/tyler/Silo/silo-dashboard/src/components/TagsInput/TagsInput.tsx":"16","/Users/tyler/Silo/silo-dashboard/src/components/TagsInput/index.ts":"17","/Users/tyler/Silo/silo-dashboard/src/components/TagsInput/TagsInput.styles.ts":"18","/Users/tyler/Silo/silo-dashboard/src/features/TraitMap/TraitMap.styles.ts":"19","/Users/tyler/Silo/silo-dashboard/src/features/TraitMap/TraitMap.tsx":"20","/Users/tyler/Silo/silo-dashboard/src/features/GroupOverview/index.ts":"21"},{"size":425,"mtime":1609922760769,"results":"22","hashOfConfig":"23"},{"size":1132,"mtime":1611959538893,"results":"24","hashOfConfig":"23"},{"size":144,"mtime":1609924955593,"results":"25","hashOfConfig":"23"},{"size":34,"mtime":1609924679822,"results":"26","hashOfConfig":"23"},{"size":509,"mtime":1611958944270,"results":"27","hashOfConfig":"23"},{"size":757,"mtime":1611959208898,"results":"28","hashOfConfig":"23"},{"size":804,"mtime":1610752269648,"results":"29","hashOfConfig":"23"},{"size":556,"mtime":1610582140995,"results":"30","hashOfConfig":"23"},{"size":34,"mtime":1610581644339,"results":"31","hashOfConfig":"23"},{"size":1743,"mtime":1611963983030,"results":"32","hashOfConfig":"23"},{"size":963,"mtime":1610753330666,"results":"33","hashOfConfig":"23"},{"size":1010,"mtime":1611963949322,"results":"34","hashOfConfig":"23"},{"size":40,"mtime":1610581863409,"results":"35","hashOfConfig":"23"},{"size":5012,"mtime":1613172757245,"results":"36","hashOfConfig":"23"},{"size":2142,"mtime":1613172050113,"results":"37","hashOfConfig":"23"},{"size":3361,"mtime":1611958349392,"results":"38","hashOfConfig":"23"},{"size":39,"mtime":1611354836476,"results":"39","hashOfConfig":"23"},{"size":1846,"mtime":1611957732432,"results":"40","hashOfConfig":"23"},{"size":1898,"mtime":1613172814965,"results":"41","hashOfConfig":"23"},{"size":3119,"mtime":1613172885075,"results":"42","hashOfConfig":"23"},{"size":43,"mtime":1610751913942,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1y6kgeo",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tyler/Silo/silo-dashboard/src/reportWebVitals.ts",[],["93","94"],"/Users/tyler/Silo/silo-dashboard/src/index.tsx",[],["95","96"],"/Users/tyler/Silo/silo-dashboard/src/features/MainLayout/MainLayout.tsx",[],"/Users/tyler/Silo/silo-dashboard/src/features/Navbar/index.ts",[],"/Users/tyler/Silo/silo-dashboard/src/features/Navbar/Navbar.tsx",[],["97","98"],"/Users/tyler/Silo/silo-dashboard/src/features/Navbar/Navbar.styles.ts",[],["99","100"],"/Users/tyler/Silo/silo-dashboard/src/components/GroupsGrid/GroupsGrid.styles.ts",[],"/Users/tyler/Silo/silo-dashboard/src/features/Home/Home.tsx",[],"/Users/tyler/Silo/silo-dashboard/src/features/Home/index.ts",[],"/Users/tyler/Silo/silo-dashboard/src/features/GroupOverview/GroupOverview.tsx",["101"],"/Users/tyler/Silo/silo-dashboard/src/components/GroupsGrid/GroupsGrid.tsx",[],"/Users/tyler/Silo/silo-dashboard/src/features/GroupOverview/GroupOverview.styles.ts",[],"/Users/tyler/Silo/silo-dashboard/src/components/GroupsGrid/index.ts",[],"/Users/tyler/Silo/silo-dashboard/src/features/CreateGroup/CreateGroup.tsx",["102","103","104","105","106"],"import React, { useEffect, useState } from \"react\";\nimport { AiFillDelete } from \"react-icons/ai\";\nimport { useHistory } from \"react-router\";\nimport TagsInput from \"../../components/TagsInput\";\nimport {\n  NewSubject,\n  NewSubjectWrapper,\n  RemoveSubjectButton,\n  SubjectActionsWrapper,\n  SubjectFieldsWrapper,\n  SubjectName,\n  SubjectRow,\n  SubjectsWrapper,\n  Title,\n  TraitEntry,\n  Wrapper,\n} from \"./CreateGroup.styles\";\n\n/**\n * Represents an assignable trait.\n */\ninterface ITrait {\n  id: number;\n  traitName: string;\n}\n\n/**\n * Represents a single subject in editing.\n */\ninterface ISubject {\n  id: number;\n  traits: ITrait[];\n  age?: number;\n  lengthOfStay?: number;\n}\n\n/**\n * Group creation page.\n */\nconst CreateGroup = () => {\n  const history = useHistory();\n\n  const [subjects, setSubjects] = useState<ISubject[]>([]);\n\n  const [traits, setTraits] = useState([]);\n\n  const [disabled, setDisabled] = useState(false);\n\n  const fetchTraits = async () => {\n    const request = await fetch(`/api/v1/traits`);\n    const json = await request.json();\n    setTraits(json.traits);\n  };\n\n  useEffect(() => {\n    fetchTraits();\n  }, []);\n\n  const nextId = () => subjects[subjects.length - 1]?.id + 1 || 1;\n\n  const newSubject = () => {\n    console.log(\"h\");\n\n    setSubjects([\n      ...subjects,\n      {\n        id: nextId(),\n        traits: [],\n        age: 0,\n        lengthOfStay: 0,\n      },\n    ]);\n  };\n\n  const updateAge = (id: number, age: number) => {\n    const c = subjects.map((subject) =>\n      subject.id == id ? { ...subject, age } : subject\n    );\n    setSubjects(c);\n  };\n\n  const updateLength = (id: number, lengthOfStay: number) => {\n    const c = subjects.map((subject) =>\n      subject.id == id ? { ...subject, lengthOfStay } : subject\n    );\n    setSubjects(c);\n  };\n\n  const updateTraits = (id: number, tags: { name: string }[]) => {\n    const t = tags.map((x) => {\n      console.log(x.name);\n      const trait: ITrait = traits.filter(\n        (i: ITrait) => i.traitName == x.name\n      )[0];\n      return {\n        id: trait.id,\n        name: trait.traitName,\n      };\n    });\n\n    const c = subjects.map((subject) =>\n      subject.id == id ? { ...subject, traits: t } : subject\n    );\n    setSubjects(c as any);\n  };\n\n  const saveGroup = async (e: any) => {\n    setDisabled(true);\n\n    const req = await fetch(`/api/v1/groups`, {\n      method: \"POST\",\n    });\n\n    const group = await req.json();\n\n    for (let i = 0; i < subjects.length; i++) {\n      let subject = subjects[i];\n\n      const req = await fetch(`/api/v1/groups/${group.id}/subjects`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          age: subject.age,\n          lengthOfStay: subject.lengthOfStay,\n        }),\n      });\n\n      const subj = await req.json();\n\n      for (let y = 0; y < subject.traits.length; y++) {\n        let trait = subject.traits[y];\n\n        console.log(trait, i);\n\n        const req = await fetch(\n          `/api/v1/groups/${group.id}/subjects/${subj.id}/traits`,\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              traitId: (trait as ITrait).id,\n            }),\n          }\n        );\n      }\n    }\n\n    setDisabled(false);\n    history.push(\"/\");\n  };\n\n  return (\n    <Wrapper disabled={disabled}>\n      <Title>Editing New Group</Title>\n      <SubjectsWrapper>\n        <NewSubjectWrapper>\n          <NewSubject onClick={newSubject}>+ Add a subject</NewSubject>\n        </NewSubjectWrapper>\n        {subjects.map((subject, index) => (\n          <SubjectRow key={subject.id}>\n            <SubjectFieldsWrapper>\n              <SubjectName>Subject {subject.id}</SubjectName>\n              <TraitEntry\n                onChange={(e) =>\n                  updateAge(subject.id, parseInt(e.target.value))\n                }\n                placeholder={\"Age\"}\n              />\n              <TraitEntry\n                onChange={(e) =>\n                  updateLength(subject.id, parseInt(e.target.value))\n                }\n                placeholder={\"Length of stay\"}\n              />\n              <TagsInput\n                onChange={(tags) => updateTraits(subject.id, tags)}\n                suggestions={traits.map((x: ITrait) => ({ name: x.traitName }))}\n                placeholder={\"Trait1, Trait2...\"}\n              />\n            </SubjectFieldsWrapper>\n            <SubjectActionsWrapper>\n              <RemoveSubjectButton\n                onClick={(e) => {\n                  console.log(index);\n                  setSubjects(subjects.filter((_, i) => i !== index));\n                }}\n              >\n                <AiFillDelete />\n              </RemoveSubjectButton>\n            </SubjectActionsWrapper>\n          </SubjectRow>\n        ))}\n      </SubjectsWrapper>\n      <NewSubject onClick={saveGroup}>Save group</NewSubject>\n    </Wrapper>\n  );\n};\n\nexport default CreateGroup;\n","/Users/tyler/Silo/silo-dashboard/src/features/CreateGroup/CreateGroup.styles.ts",[],"/Users/tyler/Silo/silo-dashboard/src/components/TagsInput/TagsInput.tsx",["107","108","109"],"import React, {useState} from \"react\";\nimport {\n  InputWrapper,\n  Suggestion,\n  SuggestionsWrapper,\n  Tag,\n  TagInput,\n  Wrapper\n} from \"./TagsInput.styles\";\n\ninterface IProps {\n  /**\n   * Suggestions to display under the input\n   * as the user types.\n   */\n  suggestions?: {\n    name: string;\n  }[];\n  /**\n   * Called when the selected tags are mutated.\n   */\n  onChange?: (\n    tags: {\n      name: string;\n    }[]\n  ) => void;\n  /**\n   * The placeholder text to show in the input\n   * before the user types.\n   */\n  placeholder?: string;\n}\n\n/**\n * Allows for the entry of tags with suggestions.\n */\nconst TagsInput = ({\n  suggestions = [{ name: \"test\" }, { name: \"one\" }, { name: \"two\" }],\n  onChange,\n  placeholder = \"Type here...\",\n}: IProps) => {\n  /*\n   * The text in the tag input.\n   */\n  const [tagValue, setTagValue] = useState(\"\");\n  /*\n   * Controls whether or not the suggestions are displayed\n   * based on whether or not the tag input is focused.\n   */\n  const [focused, setFocused] = useState(false);\n  /*\n   * A list of the currently entered tags.\n   */\n  const [tags, setTags] = useState<string[]>([]);\n  /*\n   * The index of the selected suggestion.\n   */\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n\n  /**\n   * Filters suggestions by current input value.\n   */\n  const getSuggestions = () =>\n    tagValue == \"\"\n      ? suggestions\n      : suggestions.filter((x) => x.name.indexOf(tagValue) >= 0);\n\n  const currSuggestions = getSuggestions();\n\n  /**\n   * Called when a key is pressed.\n   */\n  const keyPressed = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      setSelectedIndex(-1);\n      if (selectedIndex > -1)\n        return addTag(currSuggestions[selectedIndex].name);\n\n      addTag(tagValue);\n\n      return setTagValue(\"\");\n    }\n\n    if (e.key === \"Backspace\" && tagValue == \"\") {\n      e.preventDefault();\n      setTags(tags.slice(0, tags.length - 1));\n      return;\n    }\n    \n    if (e.key === \"ArrowDown\") {\n      e.preventDefault();\n      setSelectedIndex(selectedIndex + 1);\n      return;\n    }\n\n    if (e.key === \"ArrowUp\") {\n      if(selectedIndex > -1)\n        setSelectedIndex(selectedIndex - 1);\n      return;\n    }\n  };\n\n  /**\n   * Adds a tag.\n   */\n  const addTag = (name: string) => {\n    onChange?.([...tags, name].map((x) => ({ name: x })));\n    setTagValue(\"\");\n    setTags([...tags, name]);\n  };\n\n\n  return (\n    <Wrapper>\n      <InputWrapper>\n        {tags.map((item, i) => (\n          <Tag>{item}</Tag>\n        ))}\n        <TagInput\n          placeholder={placeholder}\n          value={tagValue}\n          onChange={(e) => setTagValue(e.target.value)}\n          onKeyDown={keyPressed}\n          onFocus={() => setFocused(true)}\n          onBlur={() => setTimeout(() => setFocused(false), 100)}\n        />\n      </InputWrapper>\n      {focused ? (\n        <SuggestionsWrapper>\n          {currSuggestions.map((item, i) => (\n            <Suggestion\n              href=\"#\"\n              selected={selectedIndex == i}\n              onClick={(e) => {\n                console.log(\"h\");\n                e.preventDefault();\n                addTag(item.name);\n              }}\n            >\n              {item.name}\n            </Suggestion>\n          ))}\n        </SuggestionsWrapper>\n      ) : null}\n    </Wrapper>\n  );\n};\n\nexport default TagsInput;\n","/Users/tyler/Silo/silo-dashboard/src/components/TagsInput/index.ts",[],"/Users/tyler/Silo/silo-dashboard/src/components/TagsInput/TagsInput.styles.ts",[],"/Users/tyler/Silo/silo-dashboard/src/features/TraitMap/TraitMap.styles.ts",[],"/Users/tyler/Silo/silo-dashboard/src/features/TraitMap/TraitMap.tsx",["110","111"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  FlexWrapper,\n  Row,\n  Title,\n  Trait,\n  TraitColumn,\n  TraitMapWrapper,\n  TraitWrapper,\n  Wrapper,\n} from \"./TraitMap.styles\";\n\n/**\n * Represents an assignable trait.\n */\ninterface ITrait {\n  id: number;\n  parentId: number;\n  traitName: string;\n}\n\n/**\n * A trait with children.\n */\ninterface ITraitWithChildren extends ITrait {\n  children?: ITraitWithChildren[];\n}\n\n/**\n * Shows a map of all traits and allows for new ones\n * to be created.\n */\nconst TraitMap = () => {\n  /*\n   * Stores a list of traits.\n   */\n  const [traits, setTraits] = useState<ITrait[]>([]);\n\n  const fetchTraits = async () => {\n    const request = await fetch(`/api/v1/traits`);\n    const json = await request.json();\n    setTraits(json.traits);\n  };\n\n  useEffect(() => {\n    fetchTraits();\n  }, []);\n\n  /*\n   * Maps traits onto a recursive structure.\n   */\n  const traitMap = (\n    traits: ITrait[],\n    parentId: number = 0\n  ): ITraitWithChildren[] => {\n    return traits\n      .filter((trait) => trait.parentId === parentId)\n      .map((trait) => ({ ...trait, children: traitMap(traits, trait.id) }));\n  };\n\n  const map = traitMap(traits);\n\n  const mapToElements = (map: ITraitWithChildren[]) => {\n    return map.map((item) => (\n      <>\n        <TraitColumn>\n          <TraitWrapper>\n            <Trait\n              onClick={(e) => {\n                const newTraitName = prompt(\"Enter a trait name\");\n\n                (async () => {\n                  const req = await fetch(`/api/v1/traits`, {\n                    method: \"POST\",\n                    headers: {\n                      \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({\n                      parentId: item.id,\n                      traitName: newTraitName,\n                    }),\n                  });\n\n                  window.location.reload();\n                })();\n              }}\n            >\n              {item.traitName}\n            </Trait>\n          </TraitWrapper>\n          <FlexWrapper>\n            {item.children ? mapToElements(item.children) : null}\n          </FlexWrapper>\n        </TraitColumn>\n      </>\n    ));\n  };\n\n  return (\n    <Wrapper>\n      <Row>\n        <Title>Traits</Title>\n        <Box>\n          <Button\n            onClick={(e) => {\n              const newTraitName = prompt(\"Enter a top-level trait name\");\n\n              (async () => {\n                const req = await fetch(`/api/v1/traits`, {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                  body: JSON.stringify({\n                    parentId: 0,\n                    traitName: newTraitName,\n                  }),\n                });\n\n                window.location.reload();\n              })();\n            }}\n          >\n            +\n          </Button>\n        </Box>\n      </Row>\n      <TraitMapWrapper>\n        <FlexWrapper>{mapToElements(map)}</FlexWrapper>\n      </TraitMapWrapper>\n    </Wrapper>\n  );\n};\n\nexport default TraitMap;\n","/Users/tyler/Silo/silo-dashboard/src/features/GroupOverview/index.ts",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"112","replacedBy":"116"},{"ruleId":"114","replacedBy":"117"},{"ruleId":"112","replacedBy":"118"},{"ruleId":"114","replacedBy":"119"},{"ruleId":"112","replacedBy":"120"},{"ruleId":"114","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":46,"column":6,"nodeType":"124","endLine":46,"endColumn":8,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":77,"column":18,"nodeType":"128","messageId":"129","endLine":77,"endColumn":20},{"ruleId":"126","severity":1,"message":"127","line":84,"column":18,"nodeType":"128","messageId":"129","endLine":84,"endColumn":20},{"ruleId":"126","severity":1,"message":"127","line":93,"column":36,"nodeType":"128","messageId":"129","endLine":93,"endColumn":38},{"ruleId":"126","severity":1,"message":"127","line":102,"column":18,"nodeType":"128","messageId":"129","endLine":102,"endColumn":20},{"ruleId":"130","severity":1,"message":"131","line":137,"column":15,"nodeType":"132","messageId":"133","endLine":137,"endColumn":18},{"ruleId":"126","severity":1,"message":"127","line":64,"column":14,"nodeType":"128","messageId":"129","endLine":64,"endColumn":16},{"ruleId":"126","severity":1,"message":"127","line":85,"column":43,"nodeType":"128","messageId":"129","endLine":85,"endColumn":45},{"ruleId":"126","severity":1,"message":"127","line":134,"column":39,"nodeType":"128","messageId":"129","endLine":134,"endColumn":41},{"ruleId":"130","severity":1,"message":"131","line":75,"column":25,"nodeType":"132","messageId":"133","endLine":75,"endColumn":28},{"ruleId":"130","severity":1,"message":"131","line":111,"column":23,"nodeType":"132","messageId":"133","endLine":111,"endColumn":26},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],["134"],["135"],["134"],["135"],["134"],["135"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["136"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'req' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},"Update the dependencies array to be: [id]",{"range":"139","text":"140"},[1146,1148],"[id]"]